app:
  telegram-token: ${BOT_TOKEN}
  scrapper-client:
    base-url: "http://localhost:8080"
    retry:
      codes: [ 408, 429, 502, 503, 504 ]
      strategy: linear
      delay: 1s
      max-attempts: 2
  update-topic: "notifier.update.message"
  use-queue: true


spring:
  application:
    name: bot
  jackson:
    time-zone: UTC
  cache:
    cache-names:
      - rate-limit-buckets
    caffeine:
      spec: maximumSize=100000,expireAfterAccess=3600s
  kafka:
    consumer:
      group-id: "bot-kafka-consumer"
      auto-offset-reset: latest
      enable-auto-commit: false
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"

    producer:
      client-id: "bot-kafka-producer"
      batch-size: 20
      acks: all
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        linger.ms: 10000
    listener:
      concurrency: 2
      ack-mode: manual
    retry:
      topic:
        enabled: true
        attempts: 3
        delay: 5s
    bootstrap-servers: "localhost:9092,localhost:9093"

springdoc:
  api-docs:
    path: "/api-docs"
  swagger-ui:
    path: "/swagger-ui"

server:
  port: 8090

logging:
  config: classpath:log4j2-plain.xml

bucket4j:
  enabled: true
  filters:
    - cache-name: rate-limit-buckets
      url: .*
      strategy: first
      rate-limits:
        - cache-key: getRemoteAddr()
          post-execute-condition: getStatus() eq 200
          bandwidths:
            - capacity: 2
              time: 1
              unit: hours
              refill-speed: interval
